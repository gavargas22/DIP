% Guillermo Vargas
% Unsharp Mask
% April 5,2016

% This code will apply certain transformations to the image selected.

% First, we select the image that we want to analyze through a dialog
[FileName,PathName] = uigetfile('*', 'Select the image to apply transformation to.');
% Proceed now to open the file
original_file_id = fopen([PathName FileName], 'r', 'l');
% Obtain information about the file from the user through a dialog box.
image_data_prompt = {'Enter image row size:','Enter image column size:'};
dialog_title = 'Image Size Information';
num_lines = 1;
default_answer = {'400', '400'};
user_gathered_image_information = inputdlg(image_data_prompt, dialog_title, num_lines, default_answer);

% We store in matrix the obtained strings and convert them to numbers.
image_information = str2double(user_gathered_image_information(:)');
image_rows = image_information(1);
image_columns = image_information(2);
% I set a variable to the number of total items in the image for future
% use.
total_number_of_pixels = image_rows * image_columns;

% Use MATLAB to open the image file.
image_data = multibandread([PathName FileName], [image_rows image_columns, 1], 'float', 0, 'bsq', 'ieee-le');

% Execute a La Placian Transform to sharpen image.
first_laplace_filter = [0 1 0 ; 1 -4 1 ; 0 1 0];

% I now pad the image with zeros to run the kernel
padded_image_data = padarray(image_data, [1, 1]);
% Get some information about the padded image data.
[padded_rows, padded_columns] = size(p

% Now we implement the equation for the laplacian sharpening.
for row = 1:size(padded_image_data, 1) - 2
    for col = 1:size(padded_image_data, 2) 
end